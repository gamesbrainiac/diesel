error[E0277]: the trait bound `bad::columns::age: SelectableExpression<users::table>` is not satisfied
  --> tests/fail/custom_returning_requires_selectable_expression.rs:28:78
   |
28 |     let stmt = update(users.filter(id.eq(1))).set(name.eq("Bill")).returning(bad::age);
   |                                                                              ^^^^^^^^ the trait `SelectableExpression<users::table>` is not implemented for `bad::columns::age`
   |
   = help: the following implementations were found:
             <bad::columns::age as SelectableExpression<JoinOn<Join, On>>>
             <bad::columns::age as SelectableExpression<Only<bad::table>>>
             <bad::columns::age as SelectableExpression<SelectStatement<FromClause<From>>>>
             <bad::columns::age as SelectableExpression<bad::table>>
           and 2 others
   = note: required because of the requirements on the impl of `Query` for `UpdateStatement<users::table, diesel::query_builder::where_clause::WhereClause<diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<users::columns::id, diesel::internal::derives::as_expression::Bound<diesel::sql_types::Integer, i32>>>>, diesel::query_builder::update_statement::changeset::Assign<users::columns::name, diesel::internal::derives::as_expression::Bound<diesel::sql_types::Text, &str>>, diesel::query_builder::returning_clause::ReturningClause<bad::columns::age>>`

error[E0277]: the trait bound `bad::columns::age: SelectableExpression<users::table>` is not satisfied
  --> tests/fail/custom_returning_requires_selectable_expression.rs:33:63
   |
33 |     let stmt = insert_into(users).values(&new_user).returning((name, bad::age));
   |                                                               ^^^^^^^^^^^^^^^^ the trait `SelectableExpression<users::table>` is not implemented for `bad::columns::age`
   |
   = help: the following implementations were found:
             <bad::columns::age as SelectableExpression<JoinOn<Join, On>>>
             <bad::columns::age as SelectableExpression<Only<bad::table>>>
             <bad::columns::age as SelectableExpression<SelectStatement<FromClause<From>>>>
             <bad::columns::age as SelectableExpression<bad::table>>
           and 2 others
   = note: required because of the requirements on the impl of `SelectableExpression<users::table>` for `(users::columns::name, bad::columns::age)`
   = note: required because of the requirements on the impl of `Query` for `InsertStatement<users::table, diesel::query_builder::insert_statement::ValuesClause<(DefaultableColumnInsertValue<ColumnInsertValue<users::columns::name, diesel::internal::derives::as_expression::Bound<diesel::sql_types::Text, &std::string::String>>>,), users::table>, diesel::query_builder::insert_statement::private::Insert, diesel::query_builder::returning_clause::ReturningClause<(users::columns::name, bad::columns::age)>>`

error[E0277]: the trait bound `users::table: AppearsInFromClause<bad::table>` is not satisfied
  --> tests/fail/custom_returning_requires_selectable_expression.rs:33:53
   |
33 |     let stmt = insert_into(users).values(&new_user).returning((name, bad::age));
   |                                                     ^^^^^^^^^ the trait `AppearsInFromClause<bad::table>` is not implemented for `users::table`
   |
   = help: the following implementations were found:
             <users::table as AppearsInFromClause<users::table>>
   = note: required because of the requirements on the impl of `AppearsOnTable<users::table>` for `bad::columns::age`
   = note: 1 redundant requirements hidden
   = note: required because of the requirements on the impl of `AppearsOnTable<users::table>` for `(users::columns::name, bad::columns::age)`
   = note: required because of the requirements on the impl of `SelectableExpression<users::table>` for `(users::columns::name, bad::columns::age)`
   = note: required because of the requirements on the impl of `Query` for `InsertStatement<users::table, diesel::query_builder::insert_statement::ValuesClause<(DefaultableColumnInsertValue<ColumnInsertValue<users::columns::name, diesel::internal::derives::as_expression::Bound<diesel::sql_types::Text, &std::string::String>>>,), users::table>, diesel::query_builder::insert_statement::private::Insert, diesel::query_builder::returning_clause::ReturningClause<(users::columns::name, bad::columns::age)>>`
